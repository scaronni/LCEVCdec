/* Copyright (c) V-Nova International Limited 2025. All rights reserved.
 * This software is licensed under the BSD-3-Clause-Clear License by V-Nova Limited.
 * No patent licenses are granted under this license. For enquiries about patent licenses,
 * please contact legal@v-nova.com.
 * The LCEVCdec software is a stand-alone project and is NOT A CONTRIBUTION to any other project.
 * If the software is incorporated into another project, THE TERMS OF THE BSD-3-CLAUSE-CLEAR LICENSE
 * AND THE ADDITIONAL LICENSING INFORMATION CONTAINED IN THIS FILE MUST BE MAINTAINED, AND THE
 * SOFTWARE DOES NOT AND MUST NOT ADOPT THE LICENSE OF THE INCORPORATING PROJECT. However, the
 * software may be incorporated into a project under a compatible license provided the requirements
 * of the BSD-3-Clause-Clear license are respected, and V-Nova Limited remains
 * licensor of the software ONLY UNDER the BSD-3-Clause-Clear license (not the compatible license).
 * ANY ONWARD DISTRIBUTION, WHETHER STAND-ALONE OR AS PART OF ANY OTHER PROJECT, REMAINS SUBJECT TO
 * THE EXCLUSION OF PATENT LICENSES PROVISION OF THE BSD-3-CLAUSE-CLEAR LICENSE. */

// Vulkan Vertical format conversion shader

#version 450

layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z_id = 2) in;

layout(std430, set = 0, binding = 0) buffer restrict readonly SrcImageBuffer {
    uint samples[];
} src;

layout(std430, set = 0, binding = 1) buffer restrict writeonly DstImageBuffer {
    uint samples[];
} dst;

layout(push_constant) uniform consts {
    int width;
    int containerStrideIn;
    int containerOffsetIn;
    int containerStrideOut;
    int containerOffsetOut;
    int containerStrideV; // used to check for nv12 and as input or output stride for V-plane
    int containerOffsetV; // used with nv12 as input or output offset for V-plane
    int bit8;
    int toInternal;
    int shift;     // 5 for 10bit, 3 for 12bit, and 1 for 14bit
};

#include "common.glsl"

void main()
{
    const uint x = gl_GlobalInvocationID.x;
    const uint y = gl_GlobalInvocationID.y;

    if (toInternal == 1) {
        if (bit8 == 1) {
            if (containerStrideV != 0) { // NV12 src
                const ivec4 pixels = toInternalFrom8bit(unpack8bit(src.samples[containerOffsetIn + x + y * containerStrideIn]));
                dst.samples[containerOffsetOut + x + y * containerStrideOut] = pack16bitInternals(ivec2(pixels.x, pixels.z));
                dst.samples[containerOffsetV + x + y * containerStrideV] = pack16bitInternals(ivec2(pixels.y, pixels.w));
            } else {
                const ivec4 pixels = toInternalFrom8bit(unpack8bit(src.samples[containerOffsetIn + x + y * containerStrideIn]));
                dst.samples[containerOffsetOut + 2 * x + y * containerStrideOut] = pack16bitInternals(pixels.xy);
                if(4 * x + 2 < width) {
                    dst.samples[containerOffsetOut + 2 * x + 1 + y * containerStrideOut] = pack16bitInternals(pixels.zw);
                }
            }
        } else {
            const ivec2 pixels = toInternalFrom16bit(unpack16bit(src.samples[containerOffsetIn + x + y * containerStrideIn]), shift);
            dst.samples[containerOffsetOut + x + y * containerStrideOut] = pack16bitInternals(pixels);
        }
    } else {
        if (bit8 == 1) {
            if (containerStrideV != 0) { // NV12 dst
                const ivec2 pixels1 = unpack16bitInternals(src.samples[containerOffsetIn + x + y * containerStrideIn]);
                const ivec2 pixels2 = unpack16bitInternals(src.samples[containerOffsetV + x + y * containerStrideV]);
                dst.samples[containerOffsetOut + x + y * containerStrideOut] = pack8bit(fromInternalTo8bit(ivec4(pixels1.x, pixels2.x, pixels1.y, pixels2.y)));
            } else {
                const ivec2 pixels1 = unpack16bitInternals(src.samples[containerOffsetIn + 2 * x + y * containerStrideIn]);
                const ivec2 pixels2 = unpack16bitInternals(src.samples[containerOffsetIn + 2 * x + 1 + y * containerStrideIn]);
                dst.samples[containerOffsetOut + x + y * containerStrideOut] = pack8bit(fromInternalTo8bit(ivec4(pixels1.x, pixels1.y, pixels2.x, pixels2.y)));
            }
        } else {
            const ivec2 pixels = unpack16bitInternals(src.samples[containerOffsetIn + x + y * containerStrideIn]);
            dst.samples[containerOffsetOut + x + y * containerStrideOut] = pack16bit(fromInternalTo16bit(pixels, shift));
        }
    }
}
