/* Copyright (c) V-Nova International Limited 2025. All rights reserved.
 * This software is licensed under the BSD-3-Clause-Clear License by V-Nova Limited.
 * No patent licenses are granted under this license. For enquiries about patent licenses,
 * please contact legal@v-nova.com.
 * The LCEVCdec software is a stand-alone project and is NOT A CONTRIBUTION to any other project.
 * If the software is incorporated into another project, THE TERMS OF THE BSD-3-CLAUSE-CLEAR LICENSE
 * AND THE ADDITIONAL LICENSING INFORMATION CONTAINED IN THIS FILE MUST BE MAINTAINED, AND THE
 * SOFTWARE DOES NOT AND MUST NOT ADOPT THE LICENSE OF THE INCORPORATING PROJECT. However, the
 * software may be incorporated into a project under a compatible license provided the requirements
 * of the BSD-3-Clause-Clear license are respected, and V-Nova Limited remains
 * licensor of the software ONLY UNDER the BSD-3-Clause-Clear license (not the compatible license).
 * ANY ONWARD DISTRIBUTION, WHETHER STAND-ALONE OR AS PART OF ANY OTHER PROJECT, REMAINS SUBJECT TO
 * THE EXCLUSION OF PATENT LICENSES PROVISION OF THE BSD-3-CLAUSE-CLEAR LICENSE. */

// Vulkan Apply shader

#version 450

layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z_id = 2) in;

layout(std430, set = 0, binding = 0) buffer restrict readonly CommandBuffer {
    uint samples[];
} cmd;

layout(std430, set = 0, binding = 1) buffer restrict writeonly PlaneBuffer {
    uint samples[];
} dst;

layout(push_constant) uniform consts {
    int srcWidth;
    int srcHeight;
    int residualOffset;
    int stride;
    int saturate;
    int testVal;
    int layerCount;
    int tuRasterOrder;
};

const uint ADD = 0;
const uint SET = 1;
const uint SETZERO = 2;
const uint CLEARSET = 3;
const int SATURATION = 32767;
const uint bit8 = 1;

uint applyCounter = 0;

#include "common.glsl"

void applyTu(uint firstPixelinTu, uint firstResidual, uint operation, uint tuWidth)
{
    for (uint j = 0; j < tuWidth; ++j) {
        for (uint i = 0; i < (tuWidth >> 1); ++i) {
            const uint pixelPairIndex = firstPixelinTu + i + j * (stride >> 1);
            const uint residualPairIndex = (residualOffset >> 2) + (firstResidual >> 1) +
                                           applyCounter * tuWidth * (tuWidth >> 1) + i + j * (tuWidth >> 1);

            if (pixelPairIndex >= srcWidth * (srcHeight >> 1)) {
                return;
            }

            ivec2 pixelPair;
            if (operation == ADD) {
                if (saturate == 1) {
                    pixelPair.x = SATURATION;
                    pixelPair.y = SATURATION;
                } else {
                    pixelPair = unpack16bitInternals(dst.samples[pixelPairIndex]);
                    const ivec2 residualPair = unpack16bitInternals(cmd.samples[residualPairIndex]);
                    pixelPair.x += residualPair.x;
                    pixelPair.y += residualPair.y;
                }
            } else if (operation == SET) {
                if (saturate == 1) {
                    pixelPair.x = SATURATION;
                    pixelPair.y = SATURATION;
                } else {
                    const ivec2 residualPair = unpack16bitInternals(cmd.samples[residualPairIndex]);
                    pixelPair.x = residualPair.x;
                    pixelPair.y = residualPair.y;
                }
            } else if (operation == SETZERO) {
                pixelPair.x = 0;
                pixelPair.y = 0;
            }
            dst.samples[pixelPairIndex] = pack16bitInternals(pixelPair);
        }
    }
    if (operation != SETZERO) {
        applyCounter++;
    }
}

void process64Bitmask(uint bitmaskMost, uint bitmaskLeast, uint operation,
                      uint startingPixelInBLock, uint tu, uint tuWidth, uint dds)
{
    for (uint i = 0; i < 64; ++i) {
        uint bitSelector;
        uint willApply;
        if (i < 32) {
            bitSelector = 1 << (31 - i);
            willApply = bitmaskMost & bitSelector;
        } else {
            bitSelector = 1 << (63 - i);
            willApply = bitmaskLeast & bitSelector;
        }

        const uint tusInRow = (dds == 1) ? 8 : 16;
        const uint iX = i % tusInRow;
        const uint iY = i / tusInRow;

        const uint widthInPairs = stride >> 1;
        const uint index = startingPixelInBLock + iX * (tuWidth >> 1) + iY * tuWidth * widthInPairs;

        const uint startX = startingPixelInBLock % widthInPairs;
        const uint startY = startingPixelInBLock / widthInPairs;
        const uint X = startX + iX * (tuWidth >> 1);
        const uint Y = startY + iY * tuWidth;
        if(X >= widthInPairs || Y >= srcHeight) {
            continue;
        }

        if (willApply > 0) {
            if (operation == ADD) {
                applyTu(index, tu, ADD, tuWidth);
            } else if (operation == SET) {
                applyTu(index, tu, SET, tuWidth);
            } else if (operation == SETZERO) {
                applyTu(index, tu, SETZERO, tuWidth);
            } else { // CLEARSET
                applyTu(index, tu, SET, tuWidth);
            }
        } else {
            if (operation == CLEARSET) {
                applyTu(index, 0, SETZERO, tuWidth);
            }
        }
    }
}

void processRasterBitmask(uvec4 bitmask1and2, uvec4 bitmask3and4, uint operation, uint block, uint tu, uint tuWidth, uint dds)
{
    const uint pixelPairsInRaster = (256 >> 1) * tuWidth;
    const uint pixelPairStartIndex = block * pixelPairsInRaster;
    const uint widthInPairs = stride >> 1;

    for (uint i = 0; i < 256; ++i) {
        uint bitSelector;
        uint willApply;
        if (i < 32) {
            bitSelector = 1 << (31 - i);
            willApply = bitmask1and2.y & bitSelector;
        }
        else if (i < 64){
            bitSelector = 1 << (63 - i);
            willApply = bitmask1and2.x & bitSelector;
        }
        else if (i < 96) {
            bitSelector = 1 << (95 - i);
            willApply = bitmask1and2.w & bitSelector;
        }
        else if (i < 128){
            bitSelector = 1 << (127 - i);
            willApply = bitmask1and2.z & bitSelector;
        }
        else if (i < 160) {
            bitSelector = 1 << (159 - i);
            willApply = bitmask3and4.y & bitSelector;
        }
        else if (i < 192){
            bitSelector = 1 << (191 - i);
            willApply = bitmask3and4.x & bitSelector;
        }
        else if (i < 224) {
            bitSelector = 1 << (223 - i);
            willApply = bitmask3and4.w & bitSelector;
        }
        else if (i < 256){
            bitSelector = 1 << (255 - i);
            willApply = bitmask3and4.z & bitSelector;
        }

        if (willApply > 0) {
            const uint pixelPairIndex = pixelPairStartIndex + i * (tuWidth >> 1);
            const uint Y = pixelPairIndex / widthInPairs;
            const uint X = pixelPairIndex % widthInPairs;
            const uint index = X + Y * tuWidth * widthInPairs;

            applyTu(index, tu, ADD, tuWidth);
        }
    }
}

void main()
{
    const uint CMDSIZE =
        10; // 4 without DD. The 3 extra (wasted) uint64_t are still part of the command stream in DDS.
    const uint dds = (layerCount == 16) ? 1 : 0;
    const uint tuWidth = (dds == 1) ? 4 : 2;
    const uint x = gl_GlobalInvocationID.x;
    const uint commandIndex = x * CMDSIZE;
    ivec4 command = ivec4(cmd.samples[commandIndex], cmd.samples[commandIndex + 1],
                          cmd.samples[commandIndex + 2], cmd.samples[commandIndex + 3]);

    uint operation = command.x & 0x3;        // One of GpuApplyOperation.
    uint block = (command.x >> 2) & 0x3FFFF; // Number of block within temporal buffer to operate on.
    uint tu = ((command.x >> 20) & 0xFFF) |
              ((command.y & 0x7FFF) << 12); // Offset into CommandBuffer of first residual for operation.
    uint bitStart = (command.y >> 15) & 0xFF;  // First set bit in bitmask.
    uint bitCount = (command.y >> 23) & 0x1FF; // Number of set bits in bitmask.
    uvec4 bitmask1and2 = uvec4(command.z, command.w , 0, 0); // 1_lsb, 1_msb, 2_lsb, 2_msb

    // DD
    uvec4 bitmask3and4 = uvec4(0, 0, 0, 0); // 3_lsb, 3_msb, 4_lsb, 4_msb
    if (dds == 0 || tuRasterOrder == 1) { // when in raster order, we make use of all 4 bitmasks for DDS
        bitmask1and2.z = cmd.samples[commandIndex + 4];
        bitmask1and2.w = cmd.samples[commandIndex + 5];
        bitmask3and4.x = cmd.samples[commandIndex + 6];
        bitmask3and4.y = cmd.samples[commandIndex + 7];
        bitmask3and4.z = cmd.samples[commandIndex + 8];
        bitmask3and4.w = cmd.samples[commandIndex + 9];
    }

    if (tuRasterOrder == 1) {
        processRasterBitmask(bitmask1and2, bitmask3and4, operation, block, tu, tuWidth, dds);
    }
    else { // temporal on block order
        const uint pixelsInBlockLength = 32;
        const uint blocksInRow = (srcWidth % pixelsInBlockLength == 0) ? (srcWidth / pixelsInBlockLength) : (srcWidth / pixelsInBlockLength) + 1;
        const uint blockX = block % blocksInRow;
        const uint blockY = block / blocksInRow;
        const uint firstPixelInBLock = blockX * (pixelsInBlockLength >> 1) + blockY * (stride >> 1) * pixelsInBlockLength;

        if (dds == 1) {
            process64Bitmask(bitmask1and2.y, bitmask1and2.x, operation, firstPixelInBLock, tu, tuWidth, 1);
        } else { // DD
            process64Bitmask(bitmask1and2.y, bitmask1and2.x, operation, firstPixelInBLock, tu, tuWidth, 0);
            process64Bitmask(bitmask1and2.w, bitmask1and2.z, operation, firstPixelInBLock + 4 * stride, tu, tuWidth, 0);
            process64Bitmask(bitmask3and4.y, bitmask3and4.x, operation, firstPixelInBLock + 2 * 4 * stride, tu, tuWidth, 0);
            process64Bitmask(bitmask3and4.w, bitmask3and4.z, operation, firstPixelInBLock + 3 * 4 * stride, tu, tuWidth, 0);
        }
    }
}
